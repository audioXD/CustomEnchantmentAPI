def modules = []
configure(allprojects - project(':modules')) {
    group = project(':').group
    version = project(':').version

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven {
            url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    if (path.startsWith(":modules:")) {
        println "Found module $name"
        modules << path
    }
}

/* **************************************************** */
/*                     [Root project]                   */
/* **************************************************** */

archivesBaseName = 'CustomEnchantmentAPI'
group = 'adx.audioxd.customenchantmentapi'
version = '2.8.4-RELEASE'

def MainClass = group + '.' + archivesBaseName
def delete_on_upload = true
def create_doc = false

// The dependencies
dependencies {
    compile(project(':modules:API'))
}

/* ********************************************************************************* */
/*                         [Processing Project data]                                 */
/* ********************************************************************************* */
// To est the code
test {
    testLogging.showStandardStreams = true
}

// Where to upload the output Files
uploadArchives {
    repositories {
        flatDir {
            dirs 'output/' + version
        }
    }
    repositories {
        flatDir {
            dirs 'output/latest'
        }
    }
}


tasks.uploadArchives.dependsOn(clean)
// Deletes every file except .gitignore
clean.doFirst {
    if (file("output/latest").exists() && delete_on_upload) {
        new File(rootDir, "output/latest").eachFile() { file ->
            if (!file.getName().equalsIgnoreCase(".gitignore")) {
                delete file.getPath()
            }
        }
    }
}

// So it includes the modules in the jar file
jar {
    from files(modules.collect {
        project(it).sourceSets.main.output
    })
}

// This method is for me to make it Easy to create a JavaDoc(.zip)
task docs(type: Javadoc) {
    source sourceSets.main.allJava
    source modules.collect { m -> project(m).sourceSets.main.allJava }

    classpath = files(modules.collect { m -> project(m).sourceSets.main.compileClasspath }, sourceSets.main.compileClasspath)
    destinationDir = new File(projectDir, 'build/docs')
}
task javadocZip(type: Zip, dependsOn: docs) {
    from "build/docs"
    baseName = "CEAPI-javadoc"
    into('/')
}

// Added the JavaDoc as a artifact
artifacts {
    if (create_doc) {
        archives(file(javadocZip.archivePath)) {
            name javadocZip.baseName
            type 'zip'
            builtBy javadocZip
        }
    }
}

// To process the plugin.yml file for ease of access
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'plugin.yml'

        expand 'plugin_name': archivesBaseName,
                'plugin_version': version,
                'plugin_main': MainClass
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'plugin.yml'
        exclude '**/*.dev'
    }
}

/* ********************************************************************************* */
/*                          [For my personal use]                                    */
/* ********************************************************************************* */

uploadArchives {
    repositories {
        flatDir {
            dirs '../_extra/output/' + archivesBaseName
        }
        flatDir {
            dirs '../_extra/run/plugins'
        }
    }
}

// This for generating the gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}